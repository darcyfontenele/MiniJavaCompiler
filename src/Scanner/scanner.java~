/* The following code was generated by JFlex 1.4.3 on 19/04/12 23:36 
 * Criado por Felipe Maia e Davi Teles
 *
 */

/*
 * JFlex specification for the lexical analyzer for a simple demo language
 * Change this into the scanner for your implementation of MiniJava.
 */


package Scanner;

import java_cup.runtime.*;
import Parser.sym;
import Throwables.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/04/12 23:36 from the specification file
 * <tt>C:/Users/Felipe/Documents/compiladores/cse401_starter_code/src/Scanner/minijava.flex</tt>
 */
public final class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\3\1\1\1\1\2\0\1\1\16\3\4\0\1\1\1\50\2\0"+
    "\1\2\1\0\1\51\1\0\1\36\1\37\1\54\1\52\1\45\1\53"+
    "\1\35\1\0\1\4\11\5\1\0\1\44\1\47\1\46\3\0\22\2"+
    "\1\24\7\2\1\42\1\0\1\43\1\0\1\2\1\0\1\10\1\14"+
    "\1\6\1\21\1\27\1\31\1\26\1\33\1\15\2\2\1\7\1\22"+
    "\1\23\1\20\1\12\1\2\1\25\1\11\1\16\1\13\1\17\1\32"+
    "\1\30\1\34\1\2\1\40\1\0\1\41\1\0\41\3\2\0\4\2"+
    "\4\0\1\2\2\0\1\3\7\0\1\2\4\0\1\2\5\0\27\2"+
    "\1\0\37\2\1\0\u01ca\2\4\0\14\2\16\0\5\2\7\0\1\2"+
    "\1\0\1\2\21\0\160\3\5\2\1\0\2\2\2\0\4\2\10\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\123\2\1\0"+
    "\213\2\1\0\5\3\2\0\236\2\11\0\46\2\2\0\1\2\7\0"+
    "\47\2\11\0\55\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0"+
    "\1\3\10\0\33\2\5\0\3\2\15\0\4\3\7\0\1\2\4\0"+
    "\13\3\5\0\53\2\37\3\4\0\2\2\1\3\143\2\1\0\1\2"+
    "\10\3\1\0\6\3\2\2\2\3\1\0\4\3\2\2\12\3\3\2"+
    "\2\0\1\2\17\0\1\3\1\2\1\3\36\2\33\3\2\0\131\2"+
    "\13\3\1\2\16\0\12\3\41\2\11\3\2\2\4\0\1\2\5\0"+
    "\26\2\4\3\1\2\11\3\1\2\3\3\1\2\5\3\22\0\31\2"+
    "\3\3\244\0\4\3\66\2\3\3\1\2\22\3\1\2\7\3\12\2"+
    "\2\3\2\0\12\3\1\0\7\2\1\0\7\2\1\0\3\3\1\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\1\2\3\0"+
    "\4\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3\1\2"+
    "\10\0\1\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\4\2"+
    "\7\0\1\2\5\0\3\3\1\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0\1\3"+
    "\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3\7\0\4\2"+
    "\1\0\1\2\7\0\14\3\3\2\1\3\13\0\3\3\1\0\11\2"+
    "\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2"+
    "\2\0\1\3\1\2\10\3\1\0\3\3\1\0\3\3\2\0\1\2"+
    "\17\0\2\2\2\3\2\0\12\3\1\0\1\2\17\0\3\3\1\0"+
    "\10\2\2\0\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0"+
    "\5\2\2\0\1\3\1\2\7\3\2\0\2\3\2\0\3\3\10\0"+
    "\2\3\4\0\2\2\1\0\3\2\2\3\2\0\12\3\1\0\1\2"+
    "\20\0\1\3\1\2\1\0\6\2\3\0\3\2\1\0\4\2\3\0"+
    "\2\2\1\0\1\2\1\0\2\2\3\0\2\2\3\0\3\2\3\0"+
    "\14\2\4\0\5\3\3\0\3\3\1\0\4\3\2\0\1\2\6\0"+
    "\1\3\16\0\12\3\11\0\1\2\7\0\3\3\1\0\10\2\1\0"+
    "\3\2\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\7\3"+
    "\1\0\3\3\1\0\4\3\7\0\2\3\1\0\2\2\6\0\2\2"+
    "\2\3\2\0\12\3\22\0\2\3\1\0\10\2\1\0\3\2\1\0"+
    "\27\2\1\0\12\2\1\0\5\2\2\0\1\3\1\2\7\3\1\0"+
    "\3\3\1\0\4\3\7\0\2\3\7\0\1\2\1\0\2\2\2\3"+
    "\2\0\12\3\1\0\2\2\17\0\2\3\1\0\10\2\1\0\3\2"+
    "\1\0\51\2\2\0\1\2\7\3\1\0\3\3\1\0\4\3\1\2"+
    "\10\0\1\3\10\0\2\2\2\3\2\0\12\3\12\0\6\2\2\0"+
    "\2\3\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0"+
    "\7\2\3\0\1\3\4\0\6\3\1\0\1\3\1\0\10\3\22\0"+
    "\2\3\15\0\60\2\1\3\2\2\7\3\4\0\10\2\10\3\1\0"+
    "\12\3\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0"+
    "\1\2\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0"+
    "\1\2\2\0\2\2\1\0\4\2\1\3\2\2\6\3\1\0\2\3"+
    "\1\2\2\0\5\2\1\0\1\2\1\0\6\3\2\0\12\3\2\0"+
    "\2\2\42\0\1\2\27\0\2\3\6\0\12\3\13\0\1\3\1\0"+
    "\1\3\1\0\1\3\4\0\2\3\10\2\1\0\44\2\4\0\24\3"+
    "\1\0\2\3\5\2\13\3\1\0\44\3\11\0\1\3\71\0\53\2"+
    "\24\3\1\2\12\3\6\0\6\2\4\3\4\2\3\3\1\2\3\3"+
    "\2\2\7\3\3\2\4\3\15\2\14\3\1\2\17\3\2\0\46\2"+
    "\12\0\53\2\1\0\1\2\3\0\u0149\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\51\2\1\0\4\2\2\0\41\2"+
    "\1\0\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\17\2"+
    "\1\0\71\2\1\0\4\2\2\0\103\2\2\0\3\3\40\0\20\2"+
    "\20\0\125\2\14\0\u026c\2\2\0\21\2\1\0\32\2\5\0\113\2"+
    "\3\0\3\2\17\0\15\2\1\0\4\2\3\3\13\0\22\2\3\3"+
    "\13\0\22\2\2\3\14\0\15\2\1\0\3\2\1\0\2\3\14\0"+
    "\64\2\40\3\3\0\1\2\3\0\2\2\1\3\2\0\12\3\41\0"+
    "\3\3\2\0\12\3\6\0\130\2\10\0\51\2\1\3\1\2\5\0"+
    "\106\2\12\0\35\2\3\0\14\3\4\0\14\3\12\0\12\3\36\2"+
    "\2\0\5\2\13\0\54\2\4\0\21\3\7\2\2\3\6\0\12\3"+
    "\46\0\27\2\5\3\4\0\65\2\12\3\1\0\35\3\2\0\13\3"+
    "\6\0\12\3\15\0\1\2\130\0\5\3\57\2\21\3\7\2\4\0"+
    "\12\3\21\0\11\3\14\0\3\3\36\2\12\3\3\0\2\2\12\3"+
    "\6\0\46\2\16\3\14\0\44\2\24\3\10\0\12\3\3\0\3\2"+
    "\12\3\44\2\122\0\3\3\1\0\25\3\4\2\1\3\4\2\1\3"+
    "\15\0\300\2\47\3\25\0\4\3\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\16\0\5\3\32\0\5\3\20\0\2\2\23\0\1\2"+
    "\13\0\5\3\5\0\6\3\1\0\1\2\15\0\1\2\20\0\15\2"+
    "\3\0\32\2\26\0\15\3\4\0\1\3\3\0\14\3\21\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2"+
    "\5\0\5\2\4\0\1\2\21\0\51\2\u0a77\0\57\2\1\0\57\2"+
    "\1\0\205\2\6\0\4\2\3\3\16\0\46\2\12\0\66\2\11\0"+
    "\1\2\17\0\1\3\27\2\11\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2"+
    "\1\0\40\3\57\0\1\2\u01d5\0\3\2\31\0\11\2\6\3\1\0"+
    "\5\2\2\0\5\2\4\0\126\2\2\0\2\3\2\0\3\2\1\0"+
    "\132\2\1\0\4\2\5\0\51\2\3\0\136\2\21\0\33\2\65\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51cc\2\64\0\u048d\2\103\0\56\2\2\0"+
    "\u010d\2\3\0\20\2\12\3\2\2\24\0\57\2\1\3\14\0\2\3"+
    "\1\0\31\2\10\0\120\2\2\3\45\0\11\2\2\0\147\2\2\0"+
    "\4\2\1\0\2\2\16\0\12\2\120\0\10\2\1\3\3\2\1\3"+
    "\4\2\1\3\27\2\5\3\20\0\1\2\7\0\64\2\14\0\2\3"+
    "\62\2\21\3\13\0\12\3\6\0\22\3\6\2\3\0\1\2\4\0"+
    "\12\3\34\2\10\3\2\0\27\2\15\3\14\0\35\2\3\0\4\3"+
    "\57\2\16\3\16\0\1\2\12\3\46\0\51\2\16\3\11\0\3\2"+
    "\1\3\10\2\2\3\2\0\12\3\6\0\27\2\3\0\1\2\1\3"+
    "\4\0\60\2\1\3\1\2\3\3\2\2\2\3\5\2\2\3\1\2"+
    "\1\3\1\2\30\0\3\2\43\0\6\2\2\0\6\2\2\0\6\2"+
    "\11\0\7\2\1\0\7\2\221\0\43\2\10\3\1\0\2\3\2\0"+
    "\12\3\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u012e\2\2\0"+
    "\76\2\2\0\152\2\46\0\7\2\14\0\5\2\5\0\1\2\1\3"+
    "\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0"+
    "\15\2\3\0\20\3\20\0\7\3\14\0\2\2\30\0\3\2\31\0"+
    "\1\2\6\0\5\2\1\0\207\2\2\0\1\3\4\0\1\2\13\0"+
    "\12\3\7\0\32\2\4\0\1\2\1\0\32\2\13\0\131\2\3\0"+
    "\6\2\2\0\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0"+
    "\2\2\22\0\3\3\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\17\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\1\22\1\23\6\3\1\24"+
    "\14\3\1\25\5\3\1\26\4\3\1\27\14\3\1\30"+
    "\1\31\1\32\1\33\3\3\1\34\3\3\1\35\10\3"+
    "\1\36\1\37\1\40\1\41\1\42\1\3\1\43\1\3"+
    "\1\44\1\3\1\45\1\0\1\46\12\0\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\55\0\264\0\341\0\u010e"+
    "\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276"+
    "\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\55\0\55\0\55\0\55"+
    "\0\55\0\u0384\0\55\0\55\0\55\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\207\0\u04bf\0\u04ec\0\u0519\0\u0546"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\55\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f\0\207\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0843\0\207\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f"+
    "\0\207\0\207\0\207\0\207\0\u0a8c\0\u0ab9\0\u0ae6\0\207"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\207\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21"+
    "\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\207\0\207\0\207\0\207"+
    "\0\207\0\u0d02\0\207\0\u0d2f\0\207\0\u0d5c\0\207\0\u0d89"+
    "\0\207\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\4\1\11\1\12\1\4\1\13\1\14\1\15\1\16"+
    "\2\4\1\17\1\20\1\21\1\22\1\4\1\23\1\4"+
    "\1\24\1\25\2\4\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\56\0\1\3\55\0\33\4\24\0"+
    "\2\6\51\0\5\4\1\46\25\4\22\0\25\4\1\47"+
    "\5\4\22\0\14\4\1\50\16\4\22\0\11\4\1\51"+
    "\21\4\22\0\16\4\1\52\14\4\22\0\21\4\1\53"+
    "\5\4\1\54\3\4\22\0\23\4\1\55\5\4\1\56"+
    "\1\4\22\0\16\4\1\57\14\4\22\0\6\4\1\60"+
    "\24\4\22\0\25\4\1\61\5\4\22\0\14\4\1\62"+
    "\15\4\1\63\22\0\25\4\1\64\5\4\22\0\5\4"+
    "\1\65\20\4\1\66\4\4\22\0\6\4\1\67\24\4"+
    "\22\0\31\4\1\70\1\4\71\0\1\71\5\0\6\4"+
    "\1\72\24\4\22\0\21\4\1\73\11\4\22\0\6\4"+
    "\1\74\24\4\22\0\12\4\1\75\20\4\22\0\16\4"+
    "\1\76\14\4\22\0\14\4\1\77\16\4\22\0\11\4"+
    "\1\100\21\4\22\0\13\4\1\101\17\4\22\0\13\4"+
    "\1\102\17\4\22\0\13\4\1\103\17\4\22\0\30\4"+
    "\1\104\2\4\22\0\23\4\1\105\7\4\22\0\7\4"+
    "\1\106\23\4\22\0\14\4\1\107\16\4\22\0\7\4"+
    "\1\110\23\4\22\0\14\4\1\111\16\4\22\0\5\4"+
    "\1\112\25\4\22\0\13\4\1\113\17\4\22\0\7\4"+
    "\1\114\23\4\22\0\24\4\1\115\6\4\22\0\14\4"+
    "\1\116\16\4\22\0\5\4\1\117\25\4\22\0\5\4"+
    "\1\120\25\4\22\0\25\4\1\121\5\4\22\0\7\4"+
    "\1\122\23\4\22\0\17\4\1\123\13\4\22\0\21\4"+
    "\1\124\11\4\22\0\13\4\1\125\17\4\22\0\14\4"+
    "\1\126\16\4\22\0\11\4\1\127\21\4\22\0\25\4"+
    "\1\130\5\4\22\0\25\4\1\131\5\4\22\0\7\4"+
    "\1\132\23\4\22\0\5\4\1\133\25\4\22\0\7\4"+
    "\1\134\23\4\22\0\14\4\1\135\16\4\22\0\13\4"+
    "\1\136\17\4\22\0\13\4\1\137\17\4\22\0\25\4"+
    "\1\140\5\4\22\0\21\4\1\141\11\4\22\0\25\4"+
    "\1\142\5\4\22\0\23\4\1\143\7\4\22\0\21\4"+
    "\1\144\11\4\22\0\25\4\1\145\5\4\22\0\25\4"+
    "\1\146\5\4\22\0\31\4\1\147\1\4\22\0\4\4"+
    "\1\150\26\4\22\0\4\4\1\151\26\4\22\0\6\4"+
    "\1\152\24\4\22\0\24\4\1\153\6\4\22\0\20\4"+
    "\1\154\12\4\22\0\21\4\1\155\11\4\22\0\17\4"+
    "\1\156\13\4\22\0\21\4\1\157\11\4\22\0\33\4"+
    "\1\160\21\0\7\4\1\161\23\4\40\0\1\162\47\0"+
    "\1\163\57\0\1\164\73\0\1\165\31\0\1\166\67\0"+
    "\1\167\44\0\1\170\62\0\1\171\47\0\1\172\45\0"+
    "\1\173\70\0\1\174\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\20\1\14\11\1\1\3\11"+
    "\23\1\1\11\66\1\1\0\1\1\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // note that these Symbol constructors are abusing the Symbol
  // interface to use Symbol's left and right fields as line and column
  // fields instead
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }
  
  // print out a symbol (aka token) nicely
  public String symbolToString(Symbol s) {
    switch (s.sym) {
		case sym.CLASS: return "CLASS";
		case sym.PUBLIC: return "PUBLIC";
		case sym.STATIC: return "STATIC";
		case sym.VOID: return "VOID";
		case sym.MAIN: return "MAIN";
		case sym.STRING: return "STRING";
		case sym.EXTENDS: return "EXTENDS";
		case sym.RETURN: return "RETURN";
		case sym.INT: return "INT";
		case sym.BOOLEAN: return "BOOLEAN";
		case sym.IF: return "IF";
		case sym.ELSE: return "ELSE";
		case sym.WHILE: return "WHILE"; 
		case sym.SYSTEMOUTPRINTLN: return "SYSTEMOUTPRINTLN";
		case sym.LENGTH: return "LENGTH";
		case sym.THIS: return "THIS";
		case sym.NEW: return "NEW";
		case sym.LPAREN: return "LPAREN";
		case sym.RPAREN: return "RPAREN";
		case sym.LBRACE: return "LBRACE";
		case sym.RBRACE: return "RBRACE";
		case sym.LBRACK: return "LBRACK";
		case sym.RBRACK: return "RBRACK";
		case sym.SEMICOLON: return "SEMICOLON";
		case sym.COMMA: return "COMMA";
		case sym.DOT: return "DOT";
		case sym.EQ: return "EQ";
		case sym.LT: return "LT";
		case sym.NOT: return "NOT";
		case sym.ANDAND: return "ANDAND";
		case sym.PLUS: return "PLUS";
		case sym.MINUS: return "MINUS";
		case sym.MULT: return "MULT";
		case sym.BOOLEAN_LITERAL: return "BOOLEAN("+ s.value.toString() + ")";
		case sym.IDENTIFIER: return "ID(" + (String)s.value + ")";
		case sym.INTEGER_LITERAL: return "INTEGER(" + String.valueOf(s.value) +")";
		case sym.EOF: return "<EOF>";
		default: return "<UNEXPECTED TOKEN " + s.toString() + ">";

    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.FileReader in) {
	    this.zzReader = in;
	  }

	  /**
	   * Creates a new scanner.
	   * There is also java.io.Reader version of this constructor.
	   *
	   * @param   in  the java.io.Inputstream to read input from.
	   */
  public scanner(java.io.InputStream in) {
	    //this(new java.io.InputStreamReader(in));
	  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, CompilerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore whitespace */
          }
        case 40: break;
        case 29: 
          { return symbol(sym.CLASS);
          }
        case 41: break;
        case 7: 
          { return symbol(sym.RPAREN);
          }
        case 42: break;
        case 32: 
          { return symbol(sym.LENGTH);
          }
        case 43: break;
        case 15: 
          { return symbol(sym.LT);
          }
        case 44: break;
        case 8: 
          { return symbol(sym.LBRACE);
          }
        case 45: break;
        case 22: 
          { return symbol(sym.INT);
          }
        case 46: break;
        case 16: 
          { return symbol(sym.NOT);
          }
        case 47: break;
        case 1: 
          { throw new LexicalCompilerException(
	"unexpected character in input: '" + yytext() + "'", 
	yyline+1, yycolumn+1);
          }
        case 48: break;
        case 36: 
          { return symbol(sym.RETURN);
          }
        case 49: break;
        case 17: 
          { return symbol(sym.PLUS);
          }
        case 50: break;
        case 4: 
          { return symbol(sym.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 51: break;
        case 38: 
          { return symbol(sym.EXTENDS);
          }
        case 52: break;
        case 26: 
          { return symbol(sym.VOID);
          }
        case 53: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 54: break;
        case 27: 
          { return symbol(sym.MAIN);
          }
        case 55: break;
        case 10: 
          { return symbol(sym.LBRACK);
          }
        case 56: break;
        case 28: 
          { return symbol(sym.ELSE);
          }
        case 57: break;
        case 33: 
          { return symbol(sym.STATIC);
          }
        case 58: break;
        case 19: 
          { return symbol(sym.MULT);
          }
        case 59: break;
        case 31: 
          { return symbol(sym.WHILE);
          }
        case 60: break;
        case 20: 
          { return symbol(sym.IF);
          }
        case 61: break;
        case 6: 
          { return symbol(sym.LPAREN);
          }
        case 62: break;
        case 25: 
          { return symbol(sym.THIS);
          }
        case 63: break;
        case 14: 
          { return symbol(sym.EQ);
          }
        case 64: break;
        case 9: 
          { return symbol(sym.RBRACE);
          }
        case 65: break;
        case 12: 
          { return symbol(sym.SEMICOLON);
          }
        case 66: break;
        case 24: 
          { return symbol(sym.BOOLEAN_LITERAL, new Boolean(true));
          }
        case 67: break;
        case 18: 
          { return symbol(sym.MINUS);
          }
        case 68: break;
        case 21: 
          { return symbol(sym.ANDAND);
          }
        case 69: break;
        case 30: 
          { return symbol(sym.BOOLEAN_LITERAL, new Boolean(false));
          }
        case 70: break;
        case 23: 
          { return symbol(sym.NEW);
          }
        case 71: break;
        case 37: 
          { return symbol(sym.BOOLEAN);
          }
        case 72: break;
        case 35: 
          { return symbol(sym.STRING);
          }
        case 73: break;
        case 13: 
          { return symbol(sym.COMMA);
          }
        case 74: break;
        case 11: 
          { return symbol(sym.RBRACK);
          }
        case 75: break;
        case 39: 
          { return symbol(sym.SYSTEMOUTPRINTLN);
          }
        case 76: break;
        case 34: 
          { return symbol(sym.PUBLIC);
          }
        case 77: break;
        case 5: 
          { return symbol(sym.DOT);
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
